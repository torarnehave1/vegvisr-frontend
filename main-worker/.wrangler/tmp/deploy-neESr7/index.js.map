{
  "version": 3,
  "sources": ["../../../../node_modules/uuid/dist/esm-browser/stringify.js", "../../../../node_modules/uuid/dist/esm-browser/rng.js", "../../../../node_modules/uuid/dist/esm-browser/native.js", "../../../../node_modules/uuid/dist/esm-browser/v4.js", "../../../index.js"],
  "sourceRoot": "C:\\Users\\torar\\MyApps\\vegvisr-frontend\\main-worker\\.wrangler\\tmp\\deploy-neESr7",
  "sourcesContent": ["import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n", "let getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n", "const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default { randomUUID };\n", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n", "import { v4 as uuidv4 } from 'uuid' // Import UUID library\n\n// Middleware to add CORS headers\nfunction addCorsHeaders(response) {\n  response.headers.set('Access-Control-Allow-Origin', '*')\n  response.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')\n  response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization')\n  return response\n}\n\n// Function to generate a unique file name\nfunction generateUniqueFileName(user_id, fileExtension) {\n  const uniqueId = uuidv4()\n  return `${user_id}/profileimage_${uniqueId}.${fileExtension}`\n}\n\n// Cloudflare Worker fetch handler\nexport default {\n  async fetch(request, env, ctx) {\n    const url = new URL(request.url)\n    const path = url.pathname\n    const method = request.method\n\n    // Handle CORS preflight requests\n    if (method === 'OPTIONS') {\n      return addCorsHeaders(new Response(null, { status: 204 }))\n    }\n\n    try {\n      if (path === '/sve2' && method === 'GET') {\n        console.log('Received GET /sve2 request')\n\n        const userEmail = url.searchParams.get('email')\n        const apiToken = env.API_TOKEN // Retrieve the token from the environment variable\n\n        if (!apiToken) {\n          console.error('Error in GET /sve2: Missing API token')\n          return addCorsHeaders(\n            new Response(JSON.stringify({ error: 'Missing API token' }), { status: 500 }),\n          )\n        }\n\n        if (!userEmail) {\n          console.error('Error in GET /sve2: Missing email parameter')\n          return addCorsHeaders(\n            new Response(JSON.stringify({ error: 'Missing email parameter' }), { status: 400 }),\n          )\n        }\n\n        const db = env.vegvisr_org // Access the D1 database binding\n\n        // Check if the user already exists in the database by checking if the email is already present\n        try {\n          const query = `\n            SELECT user_id\n            FROM config\n            WHERE email = ?;\n          `\n          const existingUser = await db.prepare(query).bind(userEmail).first()\n          if (existingUser) {\n            console.log(`User with email ${userEmail} already exists in the database`)\n            return addCorsHeaders(\n              new Response(JSON.stringify({ message: 'User with this email already exists.' }), {\n                status: 200,\n              }),\n            )\n          }\n        } catch (dbError) {\n          console.error('Error checking for existing user in database:', dbError)\n          return addCorsHeaders(\n            new Response(JSON.stringify({ error: 'Failed to check database for existing user.' }), {\n              status: 500,\n            }),\n          )\n        }\n\n        // Call the external API to register the user\n        const apiUrl = `https://slowyou.io/api/reg-user-vegvisr?email=${encodeURIComponent(userEmail)}`\n        console.log('API URL:', apiUrl)\n        console.log('Authorization Header:', `Bearer ${apiToken}`)\n\n        const response = await fetch(apiUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${apiToken}`,\n          },\n        })\n\n        console.log('Response status:', response.status)\n        const rawBody = await response.text()\n        console.log('Raw response body:', rawBody)\n\n        if (!response.ok) {\n          console.error(`Error from external API: ${response.status} ${response.statusText}`)\n          return addCorsHeaders(\n            new Response(\n              JSON.stringify({\n                error: `Failed to register user. External API returned status ${response.status}.`,\n              }),\n              { status: 500 },\n            ),\n          )\n        }\n\n        let responseBody\n        try {\n          responseBody = JSON.parse(rawBody)\n        } catch (parseError) {\n          console.error('Error parsing response body:', parseError)\n          return addCorsHeaders(\n            new Response(JSON.stringify({ error: 'Failed to parse response from external API.' }), {\n              status: 500,\n            }),\n          )\n        }\n\n        // Insert the new user into the database\n        try {\n          const userId = uuidv4() // Generate a unique user ID\n          const defaultData =\n            '{\"profile\":{\"username\":\"\",\"email\":\"\",\"bio\":\"\"},\"settings\":{\"darkMode\":false,\"notifications\":true,\"theme\":\"dark\"}}'\n          const insertQuery = `\n            INSERT INTO config (email, user_id, data)\n            VALUES (?, ?, ?)\n            ON CONFLICT(email) DO NOTHING;\n          `\n          console.log(\n            'Executing query:',\n            insertQuery,\n            'with parameters:',\n            userEmail,\n            userId,\n            defaultData,\n          )\n          await db.prepare(insertQuery).bind(userEmail, userId, defaultData).run()\n          console.log(\n            `Inserted record into database: email=${userEmail}, user_id=${userId}, data=${defaultData}`,\n          )\n        } catch (dbError) {\n          console.error('Error inserting record into database:', dbError)\n          return addCorsHeaders(\n            new Response(JSON.stringify({ error: 'Failed to insert record into database.' }), {\n              status: 500,\n            }),\n          )\n        }\n\n        return addCorsHeaders(\n          new Response(JSON.stringify({ status: response.status, body: responseBody }), {\n            status: 200,\n          }),\n        )\n      }\n\n      if (path === '/resend-verification' && method === 'POST') {\n        console.log('Received POST /resend-verification request')\n\n        const requestBody = await request.json()\n        const userEmail = requestBody.email\n        const apiToken = env.API_TOKEN // Retrieve the token from the environment variable\n\n        if (!apiToken) {\n          console.error('Error in POST /resend-verification: Missing API token')\n          return addCorsHeaders(\n            new Response(JSON.stringify({ error: 'Missing API token' }), { status: 500 }),\n          )\n        }\n\n        if (!userEmail) {\n          console.error('Error in POST /resend-verification: Missing email parameter')\n          return addCorsHeaders(\n            new Response(JSON.stringify({ error: 'Missing email parameter' }), { status: 400 }),\n          )\n        }\n\n        // Call the external API to resend the verification email\n        const apiUrl = `https://slowyou.io/api/resend-verification-email?email=${encodeURIComponent(\n          userEmail,\n        )}`\n        console.log('API URL:', apiUrl)\n        console.log('Authorization Header:', `Bearer ${apiToken}`)\n\n        try {\n          const response = await fetch(apiUrl, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: `Bearer ${apiToken}`,\n            },\n          })\n\n          console.log('Response status:', response.status)\n          const rawBody = await response.text()\n          console.log('Raw response body:', rawBody)\n\n          if (!response.ok) {\n            console.error(`Error from external API: ${response.status} ${response.statusText}`)\n            return addCorsHeaders(\n              new Response(\n                JSON.stringify({\n                  error: `Failed to resend verification email. External API returned status ${response.status}.`,\n                }),\n                { status: 500 },\n              ),\n            )\n          }\n\n          return addCorsHeaders(\n            new Response(JSON.stringify({ message: 'Verification email resent successfully.' }), {\n              status: 200,\n            }),\n          )\n        } catch (error) {\n          console.error('Error calling external API:', error)\n          return addCorsHeaders(\n            new Response(JSON.stringify({ error: 'Failed to resend verification email.' }), {\n              status: 500,\n            }),\n          )\n        }\n      }\n\n      // Handle other routes\n      return new Response('Not Found', { status: 404 })\n    } catch (error) {\n      console.error('Error in fetch handler:', error)\n      return new Response(JSON.stringify({ error: error.message }), { status: 500 })\n    }\n  },\n}\n"],
  "mappings": "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",
  "names": []
}
