{
  "version": 3,
  "sources": ["../../../index.js"],
  "sourceRoot": "C:\\Users\\torar\\MyApps\\vegvisr-frontend\\brand-worker\\.wrangler\\tmp\\deploy-OnxkBd",
  "sourcesContent": ["export default {\n  async fetch(request, env) {\n    // Handle CORS preflight requests\n    if (request.method === 'OPTIONS') {\n      return new Response(null, {\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type',\n        },\n      })\n    }\n\n    try {\n      const url = new URL(request.url)\n      const hostname = url.hostname\n\n      // Restore /create-custom-domain endpoint\n      if (url.pathname === '/create-custom-domain' && request.method === 'POST') {\n        const { subdomain } = await request.json()\n        if (!subdomain) {\n          return new Response(JSON.stringify({ error: 'Subdomain is required' }), {\n            status: 400,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          })\n        }\n        try {\n          // Create DNS record\n          const dnsResponse = await fetch(\n            `https://api.cloudflare.com/client/v4/zones/${env.CF_ZONE_ID}/dns_records`,\n            {\n              method: 'POST',\n              headers: {\n                Authorization: `Bearer ${env.CF_API_TOKEN}`,\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                type: 'CNAME',\n                name: subdomain,\n                content: 'brand-worker.torarnehave.workers.dev',\n                proxied: true,\n              }),\n            },\n          )\n          const dnsResult = await dnsResponse.json()\n          const dnsSetup = {\n            success: dnsResult.success,\n            errors: dnsResult.errors,\n          }\n          // Create worker route\n          const workerResponse = await fetch(\n            `https://api.cloudflare.com/client/v4/zones/${env.CF_ZONE_ID}/workers/routes`,\n            {\n              method: 'POST',\n              headers: {\n                Authorization: `Bearer ${env.CF_API_TOKEN}`,\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                pattern: `${subdomain}.norsegong.com/*`,\n                script: 'brand-worker',\n              }),\n            },\n          )\n          const workerResult = await workerResponse.json()\n          const workerSetup = {\n            success: workerResult.success,\n            errors: workerResult.errors,\n          }\n          return new Response(\n            JSON.stringify({\n              overallSuccess: dnsSetup.success && workerSetup.success,\n              dnsSetup,\n              workerSetup,\n            }),\n            {\n              status: 200,\n              headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*',\n              },\n            },\n          )\n        } catch (error) {\n          return new Response(\n            JSON.stringify({\n              error: error.message,\n              overallSuccess: false,\n            }),\n            {\n              status: 500,\n              headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*',\n              },\n            },\n          )\n        }\n      }\n\n      // Proxy logic for other endpoints\n      let targetUrl\n      if (\n        url.pathname.startsWith('/getknowgraphs') ||\n        url.pathname.startsWith('/getknowgraph') ||\n        url.pathname.startsWith('/saveknowgraph') ||\n        url.pathname.startsWith('/updateknowgraph') ||\n        url.pathname.startsWith('/deleteknowgraph') ||\n        url.pathname.startsWith('/saveGraphWithHistory')\n      ) {\n        targetUrl =\n          'https://knowledge-graph-worker.torarnehave.workers.dev' + url.pathname + url.search\n      } else if (\n        url.pathname.startsWith('/mystmkrasave') ||\n        url.pathname.startsWith('/generate-header-image') ||\n        url.pathname.startsWith('/grok-ask') ||\n        url.pathname.startsWith('/grok-elaborate') ||\n        url.pathname.startsWith('/apply-style-template')\n      ) {\n        targetUrl = 'https://api.vegvisr.org' + url.pathname + url.search\n      } else {\n        targetUrl = 'https://www.vegvisr.org' + url.pathname + url.search\n      }\n\n      const headers = new Headers(request.headers)\n      headers.set('x-original-hostname', hostname)\n\n      const response = await fetch(targetUrl, {\n        method: request.method,\n        headers: headers,\n        body: request.body,\n        redirect: 'follow',\n      })\n\n      // Clone the response so we can read the body\n      const responseClone = response.clone()\n\n      // Try to parse as JSON\n      try {\n        const jsonData = await responseClone.json()\n        return new Response(JSON.stringify(jsonData), {\n          status: response.status,\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n          },\n        })\n      } catch (e) {\n        // If not JSON, return the original response\n        return new Response(response.body, {\n          status: response.status,\n          headers: {\n            ...Object.fromEntries(response.headers),\n            'Access-Control-Allow-Origin': '*',\n          },\n        })\n      }\n    } catch (error) {\n      // Return a JSON error response\n      return new Response(\n        JSON.stringify({\n          error: true,\n          message: error.message || 'Internal Server Error',\n        }),\n        {\n          status: 500,\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n          },\n        },\n      )\n    }\n  },\n}\n"],
  "mappings": "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",
  "names": []
}
